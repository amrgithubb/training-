Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\amrob\Downloads\truffle\truffleTest> truffle compile

Compiling your contracts...
===========================
> Compiling .\contracts\Migrations.sol
> Compiling .\contracts\Storage.sol
> Artifacts written to C:\Users\amrob\Downloads\truffle\truffleTest\build\contracts
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang

PS C:\Users\amrob\Downloads\truffle\truffleTest> truffle migrate

Compiling your contracts...
===========================
> Everything is up to date, there is nothing to compile.



Starting migrations...
======================
> Network name:    'ganache'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


1_initial_migration.js
======================

   Deploying 'Migrations'
   ----------------------
   > transaction hash:    0x38d2da676e3797bcc716bfd1d615f5ac8afa61da013646bbbba1024450b0e0fb
   > Blocks: 0            Seconds: 0
   > contract address:    0x79f2305dDd14d162587103Dacd356845b64891fF
   > block number:        1
   > block timestamp:     1595553354
   > account:             0xB455ffce743e5C8b3990C98B8832a7b4fFD2A6c1
   > balance:             99.9967165
   > gas used:            164175 (0x2814f)
   > gas price:           20 gwei
   > value sent:          0 ETH
   > total cost:          0.0032835 ETH


   > Saving migration to chain.
   > Saving artifacts
   -------------------------------------
   > Total cost:           0.0032835 ETH


2_deploy_contracts.js
=====================

   Deploying 'Storage'
   -------------------
   > transaction hash:    0xf396d3ad1cff49562e71ffd29e02dcaeceadb0292e54b9dc8856e72d38eec079
   > Blocks: 0            Seconds: 0
   > contract address:    0x38500c7Bc29e5F683Ac853a132EF111B5687Fc94
   > block number:        3
   > block timestamp:     1595553355
   > account:             0xB455ffce743e5C8b3990C98B8832a7b4fFD2A6c1
   > balance:             99.9939459
   > gas used:            96189 (0x177bd)
   > gas price:           20 gwei
   > value sent:          0 ETH
   > total cost:          0.00192378 ETH


   > Saving migration to chain.
   > Saving artifacts
   -------------------------------------
   > Total cost:          0.00192378 ETH


Summary
=======
> Total deployments:   2
> Final cost:          0.00520728 ETH


PS C:\Users\amrob\Downloads\truffle\truffleTest> truffle console
truffle(ganache)> let instance = await Storage.deployed()
undefined
truffle(ganache)> instance
TruffleContract {
  constructor: [Function: TruffleContract] {
    _constructorMethods: {
      configureNetwork: [Function: configureNetwork],
      setProvider: [Function: setProvider],
      new: [Function: new],
      at: [AsyncFunction: at],
      deployed: [AsyncFunction: deployed],
      defaults: [Function: defaults],
      hasNetwork: [Function: hasNetwork],
      isDeployed: [Function: isDeployed],
      detectNetwork: [AsyncFunction: detectNetwork], 
      setNetwork: [Function: setNetwork],
      setNetworkType: [Function: setNetworkType],
      setWallet: [Function: setWallet],
      resetAddress: [Function: resetAddress],
      link: [Function: link],
      clone: [Function: clone],
      addProp: [Function: addProp],
      toJSON: [Function: toJSON],
      decodeLogs: [Function: decodeLogs]
    },
    _properties: {
      contract_name: [Object],
      contractName: [Object],
      gasMultiplier: [Object],
      timeoutBlocks: [Object],
      autoGas: [Object],
      numberFormat: [Object],
      abi: [Object],
      metadata: [Function: metadata],
      network: [Function: network],
      networks: [Function: networks],
      address: [Object],
      transactionHash: [Object],
      links: [Function: links],
      events: [Function: events],
      binary: [Function: binary],
      deployedBinary: [Function: deployedBinary],
      unlinked_binary: [Object],
      bytecode: [Object],
      deployedBytecode: [Object],
      sourceMap: [Object],
      deployedSourceMap: [Object],
      source: [Object],
      sourcePath: [Object],
      legacyAST: [Object],
      ast: [Object],
      compiler: [Object],
      schema_version: [Function: schema_version],
      schemaVersion: [Function: schemaVersion],
      updated_at: [Function: updated_at],
      updatedAt: [Function: updatedAt],
      userdoc: [Function: userdoc],
      devdoc: [Function: devdoc],
      networkType: [Object],
      immutableReferences: [Object]
    },
    _property_values: {},
    _json: {
      contractName: 'Storage',
      abi: [Array],
      metadata: `{"compiler":{"version":"0.5.16+commit.9c3226ce"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"retreive","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"num","type":"uint256"}],"name":"store","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Store & retreive value in a variable","methods":{"retreive()":{"details":"Return value","return":"value of 'number'"},"store(uint256)":{"details":"Store value in variable","params":{"num":"value to store"}}},"title":"Storage"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/C/Users/amrob/Downloads/truffle/truffleTest/contracts/Storage.sol":"Storage"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"/C/Users/amrob/Downloads/truffle/truffleTest/contracts/Storage.sol":{"keccak256":"0x7f2822d5bb94fb795821687a6ceea802c8d734bd826e8b93441fe1a40a2c5529","urls":["bzz-raw://1bdacdb832af238efb01d4b45109162e3b7017d754a1f38ac98dbfb9d9495021","dweb:/ipfs/QmeBxoKcgshCHBPd8m8xW7zuSW8sx3BXUE9yStwVdeiY5r"]}},"version":1}`,
      bytecode: '0x608060405234801561001057600080fd5b5060c68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636057361d146037578063b05784b8146062575b600080fd5b606060048036036020811015604b57600080fd5b8101908080359060200190929190505050607e565b005b60686088565b6040518082815260200191505060405180910390f35b8060008190555050565b6000805490509056fea265627a7a72315820c82ab729365ab10420b90744e6689b8bd2418aaf7c7e21b1ab1c6deb74403afa64736f6c63430005100032',
      deployedBytecode: '0x6080604052348015600f57600080fd5b506004361060325760003560e01c80636057361d146037578063b05784b8146062575b600080fd5b606060048036036020811015604b57600080fd5b8101908080359060200190929190505050607e565b005b60686088565b6040518082815260200191505060405180910390f35b8060008190555050565b6000805490509056fea265627a7a72315820c82ab729365ab10420b90744e6689b8bd2418aaf7c7e21b1ab1c6deb74403afa64736f6c63430005100032',
      immutableReferences: undefined,
      sourceMap: '111:373:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;111:373:1;;;;;;;',
      deployedSourceMap: '111:373:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;111:373:1;;;;;;;;;;;;;;;;;;;;;;;;247:66;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;247:66:1;;;;;;;;;;;;;;;;;:::i;:::-;;399:82;;;:::i;:::-;;;;;;;;;;;;;;;;;;;247:66;302:3;293:6;:12;;;;247:66;:::o;399:82::-;440:7;467:6;;460:13;;399:82;:::o',
      source: 'pragma solidity >=0.4.22 <0.7.0;\r\n' +
        '\r\n' +
        '/**\r\n' +
        ' * @title Storage\r\n' +
        ' * @dev Store & retreive value in a variable\r\n' +
        ' */\r\n' +
        'contract Storage {\r\n' +
        '    uint256 number;\r\n' +
        '\r\n' +
        '    /**\r\n' +
        '     * @dev Store value in variable\r\n' +
        '     * @param num value to store\r\n' +
        '     */\r\n' +
        '    function store(uint256 num) public {\r\n' +
        '        number = num;\r\n' +
        '    }\r\n' +
        '\r\n' +
        '    /**\r\n' +
        '     * @dev Return value\r\n' +
        "     * @return value of 'number'\r\n" +
        '     */\r\n' +
        '    function retreive() public view returns (uint256) {\r\n' +
        '        return number;\r\n' +
        '    }\r\n' +
        '}\r\n',
      sourcePath: 'C:/Users/amrob/Downloads/truffle/truffleTest/contracts/Storage.sol',
      ast: [Object],
      legacyAST: [Object],
      compiler: [Object],
      networks: [Object],
      schemaVersion: '3.2.2',
      updatedAt: '2020-07-24T01:15:55.567Z',
      networkType: 'ethereum',
      devdoc: [Object],
      userdoc: [Object]
    },
    configureNetwork: [Function: bound configureNetwork],
    setProvider: [Function: bound setProvider],
    new: [Function: bound new] {
      estimateGas: [Function: bound estimateDeployment]
    },
    at: [Function: bound at] AsyncFunction,
    deployed: [Function: bound deployed] AsyncFunction,
    defaults: [Function: bound defaults],
    hasNetwork: [Function: bound hasNetwork],
    isDeployed: [Function: bound isDeployed],
    detectNetwork: [Function: bound detectNetwork] AsyncFunction,
    setNetwork: [Function: bound setNetwork],
    setNetworkType: [Function: bound setNetworkType],
    setWallet: [Function: bound setWallet],
    resetAddress: [Function: bound resetAddress],
    link: [Function: bound link],
    clone: [Function: bound clone],
    addProp: [Function: bound addProp],
    toJSON: [Function: bound toJSON],
    decodeLogs: [Function: bound decodeLogs],
    class_defaults: {
      from: '0xB455ffce743e5C8b3990C98B8832a7b4fFD2A6c1',
      gas: 6721975,
      gasPrice: 20000000000
    },
    interfaceAdapter: Web3InterfaceAdapter { web3: [Web3Shim] },
    web3: Web3Shim {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HttpProvider],
      setProvider: [Function],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      version: '1.2.1',
      utils: [Object],
      eth: [Eth],
      shh: [Shh],
      bzz: [Bzz],
      networkType: 'ethereum'
    },
    currentProvider: HttpProvider {
      host: 'http://127.0.0.1:7545',
      httpAgent: [Agent],
      timeout: 0,
      headers: undefined,
      connected: true,
      send: [Function],
      _alreadyWrapped: true
    },
    network_id: '5777',
    ens: { enabled: false, registryAddress: null }
  },
  methods: {
    'store(uint256)': [Function] {
      call: [Function],
      sendTransaction: [Function],
      estimateGas: [Function],
      request: [Function]
    },
    'retreive()': [Function] {
      call: [Function],
      sendTransaction: [Function],
      estimateGas: [Function],
      request: [Function]
    }
  },
  abi: [
    {
      constant: false,
      inputs: [Array],
      name: 'store',
      outputs: [],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function',
      signature: '0x6057361d'
    },
    {
      constant: true,
      inputs: [],
      name: 'retreive',
      outputs: [Array],
      payable: false,
      stateMutability: 'view',
      type: 'function',
      signature: '0xb05784b8'
    }
  ],
  address: '0x38500c7Bc29e5F683Ac853a132EF111B5687Fc94',
  transactionHash: undefined,
  contract: Contract {
    currentProvider: [Getter/Setter],
    _requestManager: RequestManager {
      provider: [HttpProvider],
      providers: [Object],
      subscriptions: {}
    },
    givenProvider: null,
    providers: {
      WebsocketProvider: [Function: WebsocketProvider],
      HttpProvider: [Function: HttpProvider],
      IpcProvider: [Function: IpcProvider]
    },
    _provider: HttpProvider {
      host: 'http://127.0.0.1:7545',
      httpAgent: [Agent],
      timeout: 0,
      headers: undefined,
      connected: true,
      send: [Function],
      _alreadyWrapped: true
    },
    setProvider: [Function],
    BatchRequest: [Function: bound Batch],
    extend: [Function: ex] {
      formatters: [Object],
      utils: [Object],
      Method: [Function: Method]
    },
    clearSubscriptions: [Function],
    options: { address: [Getter/Setter], jsonInterface: [Getter/Setter] },
    defaultAccount: [Getter/Setter],
    defaultBlock: [Getter/Setter],
    methods: {
      store: [Function: bound _createTxObject],
      '0x6057361d': [Function: bound _createTxObject],
      'store(uint256)': [Function: bound _createTxObject],
      retreive: [Function: bound _createTxObject],
      '0xb05784b8': [Function: bound _createTxObject],
      'retreive()': [Function: bound _createTxObject]
    },
    events: { allEvents: [Function: bound ] },
    _address: '0x38500c7Bc29e5F683Ac853a132EF111B5687Fc94',
    _jsonInterface: [ [Object], [Object] ]
  },
  store: [Function] {
    call: [Function],
      store: [Function: bound _createTxObject],
      '0x6057361d': [Function: bound _createTxObject],
      'store(uint256)': [Function: bound _createTxObject],
      retreive: [Function: bound _createTxObject],
      '0xb05784b8': [Function: bound _createTxObject],
      'retreive()': [Function: bound _createTxObject]
    },
    events: { allEvents: [Function: bound ] },
    _address: '0x38500c7Bc29e5F683Ac853a132EF111B5687Fc94',
    _jsonInterface: [ [Object], [Object] ]
  },
  store: [Function] {
    call: [Function],
    estimateGas: [Function],
    request: [Function]
  },
  retreive: [Function] {
    call: [Function],
    sendTransaction: [Function],
    estimateGas: [Function],
    request: [Function]
  },
  sendTransaction: [Function],
  send: [Function],
  allEvents: [Function],
  getPastEvents: [Function]
}
truffle(ganache)> let accounts = await web3.eth.getAccounts()
undefined
truffle(ganache)>
truffle(ganache)> let number = await instance.retreive()
undefined
truffle(ganache)> number
BN { negative: 0, words: [ 0, <1 empty item> ], length: 1, red: null }
truffle(ganache)> instance.store(50, {from: accounts[1}])
evalmachine.<anonymous>:0
instance.store(50, {from: accounts[1}])
                                    ^

Uncaught SyntaxError: Unexpected token '}'
truffle(ganache)> instance.store(50, {from: accounts[1]})
{
  tx: '0x0a098fb096b148c692f225e654c743c06cd5b6a2cdf99119caa4048be25fb0a2',
  receipt: {
    transactionHash: '0x0a098fb096b148c692f225e654c743c06cd5b6a2cdf99119caa4048be25fb0a2',
    transactionIndex: 0,
    blockHash: '0x3f1fcd17c21932e2eed10a1fd0af4b5c6672c337a7ac8c54364e3dea4956ddce',
    blockNumber: 5,
    from: '0xf86f54ed06a2cb315ca302d285ccc4f419d7881b',
    to: '0x38500c7bc29e5f683ac853a132ef111b5687fc94',
    gasUsed: 41424,
    cumulativeGasUsed: 41424,
    contractAddress: null,
    logs: [],
    status: true,
    logsBloom: '0x
    rawLogs: []
  },
  logs: []
}
truffle(ganache)> accounts
[
  '0xB455ffce743e5C8b3990C98B8832a7b4fFD2A6c1',
  '0xF86f54eD06a2CB315ca302D285ccc4F419D7881B',
  '0x5a34708233e20fa94d122f6DDD5cC5D4Fe7ecf70',
  '0x13E2B9E3cF864a5bceBe286c7872b81AB3d83144',
  '0xAd8aE202c20302Ab1653880C926fFf34EBe808f6',
  '0xfAdC4aDD21A8eE56b329368856C68C92940a595f',
  '0x5023fF8c901988e488d3DEB99FD14c725DFBC982',
  '0x906FB133DC9Ae3f6D208125e4Aa34B1Fd4a4b538',
  '0x28CCcF068211d4Eb849D67a651afd35912CaE1f0',
  '0x0d7F6D8B23cf543B641E6b69c25221C84d8143CE'
]
truffle(ganache)> number
BN { negative: 0, words: [ 0, <1 empty item> ], length: 1, red: null }
truffle(ganache)> number = await instance.retrive()
Uncaught TypeError: instance.retrive is not a function
    at evalmachine.<anonymous>:1:18
truffle(ganache)> number = await instance.retreive()
undefined
truffle(ganache)> number
BN { negative: 0, words: [ 50, <1 empty item> ], length: 1, red: null }